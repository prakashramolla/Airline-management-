"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _utils = require("../../../common/utils");

var _paymentMethodTypes = require("../../payment-method-types");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var PpsdkPayloadMapper = /*#__PURE__*/function () {
  function PpsdkPayloadMapper() {
    _classCallCheck(this, PpsdkPayloadMapper);
  }

  _createClass(PpsdkPayloadMapper, [{
    key: "mapToPayload",
    value:
    /**
     * @param {PaymentRequestData} data
     * @returns {Object}
     */
    function mapToPayload(data) {
      var additionalAction = data.additionalAction,
          _data$payment = data.payment,
          payment = _data$payment === void 0 ? {} : _data$payment,
          paymentMethod = data.paymentMethod;
      return (0, _utils.omitNil)({
        instrument: {
          expires: {
            month: payment.ccExpiry ? (0, _utils.toNumber)(payment.ccExpiry.month) : null,
            year: payment.ccExpiry ? (0, _utils.toNumber)(payment.ccExpiry.year) : null
          },
          name: payment.ccName,
          number: payment.ccNumber,
          verification_value: payment.ccCvv,
          type: _paymentMethodTypes.PPSDK_CREDIT_CARD
        },
        form_nonce: payment.hostedFormNonce,
        payment_method_id: paymentMethod.id,
        human_verification: additionalAction ? {
          id: 'recaptcha_v2_verification',
          parameters: {
            token: additionalAction ? additionalAction.data.human_verification_token : null
          }
        } : null
      });
    }
    /**
     * @param {PaymentRequestData} data
     * @returns {Object}
     */

  }, {
    key: "mapToHeaders",
    value: function mapToHeaders(data) {
      var authToken = data.authToken;
      return (0, _utils.omitNil)({
        Authorization: authToken
      });
    }
  }], [{
    key: "create",
    value:
    /**
     * @returns {PayloadMapper}
     */
    function create() {
      return new PpsdkPayloadMapper();
    }
  }]);

  return PpsdkPayloadMapper;
}();

exports.default = PpsdkPayloadMapper;
//# sourceMappingURL=ppsdk-payload-mapper.js.map